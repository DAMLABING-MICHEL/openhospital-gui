names(dat1)
sub1lm1 <- lm(dat1$SBP.M1~dat1$PWTT)
fit <- lda( dat1$SBP.M1~dat1$PWTT, data=dat1, na.action="na.omit", CV=TRUE)
fit <- lda( SBP.M1 ~ PWTT, data=dat1, na.action="na.omit", CV=TRUE)
wine <- read.table("http://archive.ics.uci.edu/ml/machinelearning-databases/wine/wine.data",sep=",")
wine <- read.table("wine.data",sep=",")
head(wine)
library("car")
table(wine)
scatterplotMatrix(wine[2:6])
library("car")
scatterplotMatrix(wine[2:6])
X11()
scatterplotMatrix(wine[2:6])
sapply(wine[2:14], mean)
sapply(wine[2:14], sd)
library("MASS")
wine.lda <- lda(wine$V1 ~ wine$V2 + wine$V3 + wine$V4 + wine$V5 + wine$V6 + wine$V7 + wine$V8 + wine$V9 + wine$V10 + wine$V11 + wine$V12 + wine$V13 + wine$V14)
wine.lda
wine.lda$scaling[,1]
wine.lda.values <- predict(wine.lda, wine[2:14])
wine.lda.values$x[,1]
ldahist(data = wine.lda.values$x[,1], g=wine$V1)
X11()
ldahist(data = wine.lda.values$x[,1], g=wine$V1)
printMeanAndSdByGroup(wine.lda.values$x,wine[1])
printMeanAndSdByGroup <- function(variables,groupvariable)
{
# find the names of the variables
variablenames <- c(names(groupvariable),names(as.data.frame(variables)))
# within each group, find the mean of each variable
groupvariable <- groupvariable[,1] # ensures
groupvariable is not a list
means <- aggregate(as.matrix(variables) ~ groupvariable, FUN = mean)
names(means) <- variablenames
print(paste("Means:"))
print(means)
# within each group, find the standard deviation of each variable:
sds <- aggregate(as.matrix(variables) ~ groupvariable,
FUN = sd)
names(sds) <- variablenames
print(paste("Standard deviations:"))
print(sds)
# within each group, find the number of samples:
samplesizes <- aggregate(as.matrix(variables) ~ groupvariable, FUN = length)
names(samplesizes) <- variablenames
print(paste("Sample sizes:"))
print(samplesizes)
}
printMeanAndSdByGroup <- function(variables,groupvariable)
{
# find the names of the variables
variablenames <- c(names(groupvariable),names(as.data.frame(variables)))
# within each group, find the mean of each variable
groupvariable <- groupvariable[,1] # ensures groupvariable is not a list
means <- aggregate(as.matrix(variables) ~ groupvariable, FUN = mean)
names(means) <- variablenames
print(paste("Means:"))
print(means)
# within each group, find the standard deviation of each variable:
sds <- aggregate(as.matrix(variables) ~ groupvariable, FUN = sd)
names(sds) <- variablenames
print(paste("Standard deviations:"))
print(sds)
# within each group, find the number of samples:
samplesizes <- aggregate(as.matrix(variables) ~ groupvariable, FUN = length)
names(samplesizes) <- variablenames
print(paste("Sample sizes:"))
print(samplesizes)
}
printMeanAndSdByGroup(wine.lda.values$x,wine[1])
function(variable,groupvariable)
{
# find out how many values the group variable can take
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
numlevels <- length(levels)
# get the mean and standard deviation for each group:
numtotal <- 0
denomtotal <- 0
for (i in 1:numlevels)
{
leveli <- levels[i]
levelidata <- variable[groupvariable==leveli,]
levelilength <- length(levelidata)
# get the mean and standard deviation for group i:
meani <- mean(levelidata)
sdi <- sd(levelidata)
numi <- (levelilength - 1)*(sdi * sdi)
denomi <- levelilength
numtotal <- numtotal + numi
denomtotal <- denomtotal + denomi
}
# calculate the within-groups variance
Vw <- numtotal / (denomtotal - numlevels)
return(Vw)
}
calcWithinGroupsVariance(wine[2],wine[1])
calcWithinGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
numlevels <- length(levels)
# get the mean and standard deviation for each group:
numtotal <- 0
denomtotal <- 0
for (i in 1:numlevels)
{
leveli <- levels[i]
levelidata <- variable[groupvariable==leveli,]
levelilength <- length(levelidata)
# get the mean and standard deviation for group i:
meani <- mean(levelidata)
sdi <- sd(levelidata)
numi <- (levelilength - 1)*(sdi * sdi)
denomi <- levelilength
numtotal <- numtotal + numi
denomtotal <- denomtotal + denomi
}
# calculate the within-groups variance
Vw <- numtotal / (denomtotal - numlevels)
return(Vw)
}
calcWithinGroupsVariance(wine[2],wine[1])
calcBetweenGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
numlevels <- length(levels)
# calculate the overall grand mean:
grandmean <- mean(variable)
# get the mean and standard deviation for each group:
numtotal <- 0
denomtotal <- 0
for (i in 1:numlevels)
{
leveli <- levels[i]
levelidata <- variable[groupvariable==leveli,]
levelilength <- length(levelidata)
# get the mean and standard deviation for group i:
meani <- mean(levelidata)
sdi <- sd(levelidata)
numi <- levelilength * ((meani - grandmean)^2)
denomi <- levelilength
numtotal <- numtotal + numi
denomtotal <- denomtotal + denomi
}
# calculate the between-groups variance
Vb <- numtotal / (numlevels - 1)
Vb <- Vb[[1]]
return(Vb)
}
calcBetweenGroupsVariance (wine[2],wine[1])
calcBetweenGroupsVariance (wine[2],wine[1])
calcBetweenGroupsVariance <- function(variable,groupvariable)
{
# find out how many values the group variable can take
groupvariable2 <- as.factor(groupvariable[[1]])
levels <- levels(groupvariable2)
numlevels <- length(levels)
# calculate the overall grand mean:
grandmean <- mean(variable)
# get the mean and standard deviation for each group:
numtotal <- 0
denomtotal <- 0
for (i in 1:numlevels)
{
leveli <- levels[i]
levelidata <- variable[groupvariable==leveli,]
levelilength <- length(levelidata)
# get the mean and standard deviation for group i:
meani <- mean(levelidata)
sdi <- sd(levelidata)
numi <- levelilength * ((meani - grandmean)^2)
denomi <- levelilength
numtotal <- numtotal + numi
denomtotal <- denomtotal + denomi
}
# calculate the between-groups variance
Vb <- numtotal / (numlevels - 1)
Vb <- Vb[[1]]
return(Vb)
}
calcBetweenGroupsVariance (wine[2],wine[1])
library("nls")
install.packages("nls2")
library("nls2")
summary(Familydata)
modello1.nls <- nls2(wt~age*ht, data=Familydata)
require(graphics)
ma <- cbind(1:6, 1:3)
(S <-  var(ma))
mahalanobis(c(0, 0), 1:2, S)
x <- matrix(rnorm(100*3), ncol = 3)
stopifnot(mahalanobis(x, 0, diag(ncol(x))) == rowSums(x*x))
##- Here, D^2 = usual squared Euclidean distances
Sx <- cov(x)
D2 <- mahalanobis(x, colMeans(x), Sx)
plot(density(D2, bw = 0.5),
main="Squared Mahalanobis distances, n=100, p=3") ; rug(D2)
qqplot(qchisq(ppoints(100), df = 3), D2,
main = expression("Q-Q plot of Mahalanobis" * ~D^2 *
" vs. quantiles of" * ~ chi[3]^2))
abline(0, 1, col = 'gray')
library("MASS")
data(cats)
str(cats)
summary(cats)
X11()
with(cats, plot(Bwt, Hwt))
title(main="Heart Weight (g) vs. Body weight(Kg)\nof Domestic Cats")
title(main="Heart Weight(g) vs. Body weight(Kg)\nof Domestic Cats")
title(main="Heart Weight (g) vs. Body weight(Kg)\nof Domestic Cats")
with(cats, plot(Hwt ~ Bwt))
with(cats, cor(Bwt, Hwt))
coeff.deter <- with(cats, cor(Bwt, Hwt))^2
coeff.pearson <- with(cats, cor(Bwt, Hwt))
with(cats, cor.test(Bwt, Hwt))
with(cats, cor.test(Bwt, Hwt, alternative="greater", conf.level=.8))
with(cats, cor.test(~ Bwt + Hwt))
with(cats, cor.test(~ Bwt + Hwt, subset=(Sex=="F")))
with(cats, plot(Bwt, Hwt, type="n", xlab="Body Weight in kg",
+                 ylab="Heart Weight in g",
+                 main="Heart Weight vs. Body Weight of Cats"))
with(cats, plot(Bwt, Hwt, type="n", xlab="Body Weight in kg",
ylab="Heart Weight in g",
main="Heart Weight vs. Body Weight of Cats"))
X11()
with(cats, plot(Bwt, Hwt, type="n", xlab="Body Weight in kg",
ylab="Heart Weight in g",
main="Heart Weight vs. Body Weight of Cats"))
X11()
with(cats, plot(Bwt, Hwt, type="n", xlab="Body Weight in kg",
ylab="Heart Weight in g",
main="Heart Weight vs. Body Weight of Cats"))
with(cats,points(Bwt[Sex=="F"],Hwt[Sex=="F"],pch=16,col="red"))
with(cats,points(Bwt[Sex=="M"],Hwt[Sex=="M"],pch=17,col="blue"))
rm(cats)
data(cement)
summary(cement)
cov.matr <- cov(cement)
cov.matr <- cov(cement)
cov2cor(cov.matr)
cov.matr
pair(cement)
pairs(cement)
plot(cement)
data(cats)
X11()
plot(Hwt ~ Bwt)
lines(lowess(Hwt ~ Bwt), col="red")
with(cats, plot(Bwt, Hwt, type="n", xlab="Body Weight in kg",
ylab="Heart Weight in g",
main="Heart Weight vs. Body Weight of Cats"))
with(cats,points(Bwt[Sex=="F"],Hwt[Sex=="F"],pch=16,col="red"))
with(cats,points(Bwt[Sex=="M"],Hwt[Sex=="M"],pch=17,col="blue"))
~
lines(lowess(Hwt ~ Bwt), col="red")
X11()
with(cats, plot(Bwt, Hwt, type="n", xlab="Body Weight in kg",
ylab="Heart Weight in g",
main="Heart Weight vs. Body Weight of Cats"))
with(cats,points(Bwt[Sex=="F"],Hwt[Sex=="F"],pch=16,col="red"))
with(cats,points(Bwt[Sex=="M"],Hwt[Sex=="M"],pch=17,col="blue"))
lines(lowess(Hwt ~ Bwt), col="red")
lines(lowess(cat$Hwt ~ cat$Bwt), col="red")
X11()
lines(lowess(cat$Hwt ~ cat$Bwt), col="red")
lowess(cat$Hwt ~ cat$Bwt)
require(graphics)
plot(cars, main = "lowess(cars)")
lines(lowess(cars), col = 2)
lines(lowess(cars, f = .2), col = 3)
legend(5, 120, c(paste("f = ", c("2/3", ".2"))), lty = 1, col = 2:3)
library(ROCR)
install.packages("ROCR")
install.packages("gplots")
install.packages("gtools")
install.packages("gplots")
install.packages("gdata")
install.packages("gplots")
install.packages("caTools")
install.packages("bitops")
remove.packages("combinat", lib="/usr/lib/R/site-library")
remove.packages("combinat")
install.packages("bitops")
install.packages("ROCR")
install.packages("gplots++")
install.packages("gplots")
install.packages("caTools")
install.packages("gplots")
install.packages("ROCR")
library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
remove.packages("gplots", lib="/usr/lib/R/site-library")
remove.packages("caTools", lib="/usr/lib/R/site-library")
remove.packages("ROCR", lib="/usr/lib/R/site-library")
if(interactive()) {
x <- rexp(25, 1/3)
vis.test(x, vt.qqnorm)
x <- rnorm(100, 50, 3)
vis.test(x, vt.normhist)
}
library("epitools", lib.loc="/usr/lib/R/site-library")
remove.packages("epitools", lib="/usr/lib/R/site-library")
install.packages("epitools")
install.packages("survival")
install.packages("survivalROC")
time <- c(1,3,4,5,5,6,7,7,7,8)
status <- c(0,1,0,1,1,0,1,1,0,1)
popol <- data.frame(time, status)
library(survival)
fit <- survfit(Surv(time, status) ~ 1, data=popol)
X11()
plot(fit)
text( fit$time, 0, format(fit$n.risk), cex = 0.7 )
plot(fit, conf.int=F).
plot(fit, conf.int=F)
text( fit$time, 0, format(fit$n.risk), cex = 0.7 )
summary(fit)
time <- c(0.909, 1.112, 1.322, 1.328, 1.536, 2.713, 2.741, 2.743, 3.524, 4.079)
status <- c(1,1,0,1,1,1,0,1,0,0)
table1 <- data.frame(time, status)
fit <- survfit(Surv(time, status) ~ 1, data=table1)
summary(fit)
plot(fit, col="red", lwd=2, conf.int=F)
text(300, 0.95, expression(bold("Group 2 - median = 233")), col=3, cex=.8, lwd=2)
#Se vogliamo esaminare la differenza delle probabilità di sopravvivenza calcolata per ogni tempo esaminato, e il suo intervallo in confidenza, utilizziamo la funzione survdiffplot disponibile nel pacchetto Design
install.packages("designGG")
library(Design)
library(DesignGG)
library("designGG", lib.loc="/home/andy/R/x86_64-pc-linux-gnu-library/3.1")
library(designGG)
time <- c(1,3,4,5,5,6,7,7,7,8)
status <- c(0,1,0,1,1,0,1,1,0,1)
popol <- data.frame(time, status)
popol
library(survival)
fit <- survfit(Surv(time, status) ~ 1, data=popol)
X11()
plot(fit)
plot(fit, conf.int=F)
text( fit$time, 0, format(fit$n.risk), cex = 0.7 )
summary(fit)
time <- c(1,3,4,5,5,6,7,7,7,8)
status <- c(0,1,0,1,1,0,1,1,0,1)
popol <- data.frame(time, status)
library(survival)
fit <- survfit(Surv(time, status) ~ 1, data=popol)
X11()
plot(fit)
##se non vogliamo l'intervallo di confidenza, scriviamo
plot(fit, conf.int=F)
text( fit$time, 0, format(fit$n.risk), cex = 0.7 )
#Con la funzione summary(fit) otteniamo le probabilità in corrispondenza dei punti dove la curva cambia
summary(fit)
time <- c(0.909, 1.112, 1.322, 1.328, 1.536, 2.713, 2.741, 2.743, 3.524, 4.079)
status <- c(1,1,0,1,1,1,0,1,0,0)
table1 <- data.frame(time, status)
fit <- survfit(Surv(time, status) ~ 1, data=table1)
summary(fit)
plot(fit, col="red", lwd=2, conf.int=F)
time <- c(1,3,4,5,5,6,7,7,7,8,2,2,3,4,6,6,7,10)
status <- c(0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1,1)
groups <- c(rep("GroupA",10), rep("GroupB",8)) # definito come fattore
pop <- data.frame(time, status, groups)
pop$groups <- factor(pop$groups)
pop
fit <- survfit(Surv(time, status) ~ groups, data=pop)
summary(fit)
plot(fit, col=2:3, lwd=2)
survdiff(Surv(time, status) ~ groups, data=pop)
RR = (6/6.05) / (5.4.95)
RR = (6/6.05) / (5  4.95)
RR = (6/6.05) / (5  / 4.95)
RR
Time1 <- c(143, 165, 188, 188, 190, 192, 206, 208, 212, 216, 220, 227, 230, 235, 246, 265, 303, 216, 244)
Time2 <- c(142, 157, 163, 198, 205, 232, 232, 232, 233, 233, 233, 233, 239, 240, 261, 280, 280, 295, 295, 323, 204, 344)
Status1 <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0)
Status2 <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0)
Gru1 <- rep("Group1", length(Status1))
Gru2 <- rep("Group2", length(Status2))
Time <- c(Time1,Time2)
Status <- c(Status1,Status2)
Group <- factor(c(Gru1,Gru2))
Surv(Time1, Status1)
Surv(Time2, Status2)
KM.fit <- survfit(Surv(Time,Status) ~ Group)
summary(KM.fit)
KM.fit
plot(KM.fit, conf.int=F, col=2:3, lwd=2, xlab="time", ylab="Survival probability")
mtext("K-M survival curve for Group1 and Group2", 3, line=2, cex=1.5)
abline(h=0)
text(300, 1, expression(bold("Group 1 - median = 216")), col=2, cex=.8, lwd=2)
text(300, 0.95, expression(bold("Group 2 - median = 233")), col=3, cex=.8, lwd=2)
survdiff(Surv(Time, Status) ~ Group)
RR <- (17/12.2) / (20/24.8)
RR
library(designGG)
survdiffplot(KM.fit)
temp <- coxph(Surv(Time, Status)~strata(Group))
plot(basehaz(temp))
library(survival)
ovarian
cph1 <- coxph(Surv(futime,fustat) ~ rx+age, data = ovarian)
summary(cph1)
1)
X11()
plot(survfi
X11()
plot(survfit(cph1))
summary(cph1)
X11()
plot(survfit(cph1))
cox.zph(cph1)
par(mfrow=c(2,2))
plot(cox.zph(cph1))
data <- read.table("http://www.sph.emory.edu/~cdckms/CoxPH/Anderson_i.txt", F, sep=",")
install.packages("gmodels")
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL")
install.packages("DBI")
install.packages("RMySQL")
library("RMySQL", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library(RMySQL)
con <- dbConnect(MySQL(), user="isf", password="isf123",
dbname="oh", host="localhost")
con
dbListTables(con)
dbListFields(con, "\table\_name")
dbListFields(con, "table\_name")
admission <- dbReadTable(con, "ADMISSION")
admission
is.data.frame(admission)
summary(admission)
tables <- dbListTables(con)
fields <- dbListFields(con, tables[1])
fields
admission <- dbReadTable(con, "ADMISSION")
summary(admission)
library(RMySQL)
con <- dbConnect(MySQL(), user="isf", password="isf123",
dbname="oh", host="localhost")
tables <- dbListTables(con)
tables
fields <- dbListFields(con, tables[1])
fields
admission <- dbReadTable(con, "ADMISSION")
admission
summary(admission)
library(RMySQL)
con <- dbConnect(MySQL(), user="isf", password="isf123",
dbname="oh", host="localhost")
tables <- dbListTables(con)
fields <- dbListFields(con, tables[1])
tables
names(tables)
fields <- dbListFields(con, "ADMISSIONTYPE")
fields
admission <- dbReadTable(con, "ADMISSIONTYPE")
str(admission)
library(Hmisc)
library(RMySQL)
setwd("~/Dropbox/PROGETTI/openhospital/wolisso")
con <- dbConnect(MySQL(), user="isf", password="isf123", dbname="wolisso", host="localhost")
tables <- dbListTables(con)
fields <- dbListFields(con, "ADMISSIONTYPE")
admission <- dbReadTable(con, "ADMISSIONTYPE")
str(admission)
summary(admission)
query <- "SELECT DATE as MESE, AGE, ROUND(MIN(AMOUNT),2) AS MINIMO, ROUND(AVG(AMOUNT),2) AS MEDIA, ROUND(MAX(AMOUNT),2) AS MASSIMO,
count(amount) as NUMBER FROM
(
select DISTINCTROW OPD_ID, BLL_ID, BLL_ID_PAT, BLP_ID, DATE_FORMAT(BLP_DATE,\"%Y-%m-%d\"),
DATE_FORMAT(BLP_DATE, \"%m\") AS DATE, BLP_AMOUNT AS AMOUNT,
if(PAT_AGE<10,\"UNDER TEN\",\"OVER TEN\") AS AGE
FROM OPD inner JOIN BILLS
ON DATE_FORMAT(BLL_DATE,\"%Y-%m-%d\")=DATE_FORMAT(OPD_DATE,\"%Y-%m-%d\") AND BLL_ID_PAT=OPD_PAT_ID
JOIN BILLPAYMENTS
ON BLP_ID_BILL = BLL_ID
JOIN PATIENT
ON BLL_ID_PAT = PAT_ID
WHERE DATE_FORMAT(BLP_DATE,\"%Y-%m-%d\") BETWEEN \"2014-01-01\" AND \"2014-08-01\"
GROUP BY BLL_ID
) AS G
GROUP BY MESE, AGE"
a <- dbGetQuery(con, query)
a$AGE <- as.factor(a$AGE)
a$MESE <- as.factor(a$MESE)
b <- xtabs( MEDIA ~ MESE+AGE,  data = a)
summary(b)
b
library("ROCR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
## computing a simple ROC curve (x-axis: fpr, y-axis: tpr)
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
## precision/recall curve (x-axis: recall, y-axis: precision)
perf1 <- performance(pred, "prec", "rec")
plot(perf1)
## sensitivity/specificity curve (x-axis: specificity,
## y-axis: sensitivity)
perf1 <- performance(pred, "sens", "spec")
plot(perf1)
